# engine/console.py
import numpy as np
from typing import Tuple, Self


class Console:
    """Simple console holding (tile_index, fg_color, bg_color) per cell, using a NumPy array."""

    def __init__(self: Self, width: int, height: int):
        if width <= 0 or height <= 0:
            raise ValueError("Console width and height must be positive integers.")
        self.width: int = width
        self.height: int = height

        # Define the default tile structure
        default_tile: tuple[int, tuple[int, int, int], tuple[int, int, int]] = (
            0,
            (0, 0, 0),
            (0, 0, 0),  # Black background, black foreground, index 0
        )

        # FIXED INITIALIZATION:
        # Create a 2D list of tuples for initialization
        tiles_list = [[default_tile for _ in range(width)] for _ in range(height)]

        # Convert the list to a NumPy array with object dtype
        self.tiles: np.ndarray = np.array(tiles_list, dtype=object)

    def set_tile(
        self: Self,
        x: int,
        y: int,
        tile_index: int,
        fg_color: tuple[int, int, int] = (255, 255, 255),
        bg_color: tuple[int, int, int] = (0, 0, 0),
    ) -> None:
        """Set tile at (x, y) with index and colors. Uses row-major indexing (y, x)."""
        if 0 <= x < self.width and 0 <= y < self.height:
            # Access using (row, column) -> (y, x)
            self.tiles[y, x] = (tile_index, fg_color, bg_color)

    def clear(
        self: Self,
        default_tile: tuple[int, tuple[int, int, int], tuple[int, int, int]] = (
            0,
            (0, 0, 0),
            (0, 0, 0),
        ),
    ) -> None:
        """Efficiently clear the console to a default tile."""
        # Create a new array with the default tile
        tiles_list = [
            [default_tile for _ in range(self.width)] for _ in range(self.height)
        ]
        self.tiles = np.array(tiles_list, dtype=object)
